// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var Verifier = artifacts.require('verifier');


contract('TestVerifier', async( accounts ) => {

    let proof= require('../../zokrates/code/square/proof.json');

    const account_one = accounts[0];
    //console.log(proof);

    // Test verification with correct proof
    // - use the contents from proof.json generated from zokrates steps
    describe('Test verifier', function () {
        beforeEach(async function () { 
            this.contract = await Verifier.new({from: account_one});

        })

        it('should verify correct proof', async function () { 
        let tx = await this.contract.verifyTx.call(
                        proof.proof.A,
                        proof.proof.A_p,
                        proof.proof.B,
                        proof.proof.B_p,
                        proof.proof.C,
                        proof.proof.C_p,
                        proof.proof.H,
                        proof.proof.K,
                        proof.input,
                        {from: account_one})

        //console.log(tx);
                        
        //assert.equal(tx.logs[0].event, 'Verified')
        assert.equal(tx, true)
        })

        // Test verification with incorrect proof

        it('should not verify incorrect proof', async function () { 
            let tx = await this.contract.verifyTx.call(
                            proof.proof.A,
                            proof.proof.A,
                            proof.proof.B,
                            proof.proof.B_p,
                            proof.proof.C,
                            proof.proof.C_p,
                            proof.proof.H,
                            proof.proof.K,
                            proof.input,
                            {from: account_one})
    
            //console.log(tx.logs[0]);
                            
            //assert.equal(tx.logs[0], 'undefined')
            assert.equal(tx, false)
            })    
    });

})
